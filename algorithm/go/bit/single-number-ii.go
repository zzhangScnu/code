//给你一个整数数组 nums ，除某个元素仅出现 一次 外，其余每个元素都恰出现 三次 。请你找出并返回那个只出现了一次的元素。
//
//
//
// 示例 1：
//
//
//输入：nums = [2,2,3,2]
//输出：3
//
//
// 示例 2：
//
//
//输入：nums = [0,1,0,1,0,1,99]
//输出：99
//
//
//
//
// 提示：
//
//
// 1 <= nums.length <= 3 * 10⁴
// -2³¹ <= nums[i] <= 2³¹ - 1
// nums 中，除某个元素仅出现 一次 外，其余每个元素都恰出现 三次
//
//
//
//
// 进阶：你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？
// Related Topics 位运算 数组 👍 861 👎

package bit

func SingleNumberII(nums []int) int {
	// res初始化为32位全0的二进制数字串
	res, sum := int32(0), 0
	for i := 0; i < 32; i++ {
		sum = 0
		// 取32位中的每一位进行累加，从低位开始
		for _, num := range nums {
			sum += num >> i & 1
		}
		// sum: 0, 3, 4。如果是4这种情况，证明这一位上，答案的值是1
		if sum%3 > 0 {
			// 所以将1左移i位，跟答案异或，达到把第i位置为1的目的
			res |= 1 << i
		}
	}
	return int(res)
}
